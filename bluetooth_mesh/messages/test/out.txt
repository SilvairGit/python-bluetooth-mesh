@0x97ebbc55406edfb4;

struct AccessMessage {
    opcode @0 :UInt32;
    union {
        configAppkeyAdd @1 :ConfigAppKeyUpdate;
        configAppkeyDelete @2 :ConfigAppKeyDelete;
        configAppkeyGet @3 :ConfigAppKeyGet;
        configAppkeyList @4 :ConfigAppKeyList;
        configAppkeyStatus @5 :ConfigAppKeyStatus;
        configAppkeyUpdate @6 :ConfigAppKeyUpdate;
        configBeaconGet @7 :ConfigBeaconGet;
        configBeaconSet @8 :ConfigBeaconStatus;
        configBeaconStatus @9 :ConfigBeaconStatus;
        configCompositionDataGet @10 :ConfigCompositionDataGet;
        configCompositionDataStatus @11 :ConfigCompositionDataStatus;
        configDefaultTtlGet @12 :ConfigDefaultTTLGet;
        configDefaultTtlSet @13 :ConfigDefaultTTLStatus;
        configDefaultTtlStatus @14 :ConfigDefaultTTLStatus;
        configFriendGet @15 :ConfigFriendGet;
        configFriendSet @16 :ConfigFriendStatus;
        configFriendStatus @17 :ConfigFriendStatus;
        configGattProxyGet @18 :ConfigGATTProxyGet;
        configGattProxySet @19 :ConfigGATTProxyStatus;
        configGattProxyStatus @20 :ConfigGATTProxyStatus;
        configHearbeatPublicationGet @21 :ConfigHeartbeatPublicationGet;
        configHearbeatPublicationSet @22 :ConfigHeartbeatPublicationSet;
        configHearbeatPublicationStatus @23 :ConfigHeartbeatPublicationStatus;
        configHearbeatSubscriptionGet @24 :ConfigHeartbeatSubscriptionGet;
        configHearbeatSubscriptionSet @25 :ConfigHeartbeatSubscriptionSet;
        configHearbeatSubscriptionStatus @26 :ConfigHeartbeatSubscriptionStatus;
        configKeyRefreshPhaseGet @27 :ConfigKeyRefreshPhaseGet;
        configKeyRefreshPhaseSet @28 :ConfigKeyRefreshPhaseSet;
        configKeyRefreshPhaseStatus @29 :ConfigKeyRefreshPhaseStatus;
        configLowPowerNodePollTimeoutGet @30 :ConfigLowPowerNodePollTimeoutGet;
        configLowPowerNodePollTimeoutStatus @31 :ConfigLowPowerNodePollTimeoutStatus;
        configModelAppBind @32 :ConfigModelAppUnbind;
        configModelAppStatus @33 :ConfigModelAppStatus;
        configModelAppUnbind @34 :ConfigModelAppUnbind;
        configModelPublicationGet @35 :ConfigModelPublicationGet;
        configModelPublicationSet @36 :ConfigModelPublicationSet;
        configModelPublicationStatus @37 :ConfigModelPublicationStatus;
        configModelPublicationVirtualAddressSet @38 :ConfigModelPublicationVASet;
        configModelSubscriptionAdd @39 :ConfigModelSubscriptionOverwrite;
        configModelSubscriptionDelete @40 :ConfigModelSubscriptionOverwrite;
        configModelSubscriptionDeleteAll @41 :ConfigModelSubscriptionDeleteAll;
        configModelSubscriptionOverwrite @42 :ConfigModelSubscriptionOverwrite;
        configModelSubscriptionStatus @43 :ConfigModelSubscriptionStatus;
        configModelSubscriptionVirtualAddressAdd @44 :ConfigModelSubscriptionVAOverwrite;
        configModelSubscriptionVirtualAddressDelete @45 :ConfigModelSubscriptionVAOverwrite;
        configModelSubscriptionVirtualAddressOverwrite @46 :ConfigModelSubscriptionVAOverwrite;
        configNetkeyAdd @47 :ConfigNetKeyUpdate;
        configNetkeyDelete @48 :ConfigNetKeyDelete;
        configNetkeyGet @49 :ConfigNetKeyGet;
        configNetkeyList @50 :ConfigNetKeyList;
        configNetkeyStatus @51 :ConfigNetKeyStatus;
        configNetkeyUpdate @52 :ConfigNetKeyUpdate;
        configNetworkTransmitGet @53 :ConfigNetworkTransmitGet;
        configNetworkTransmitSet @54 :UInt16;
        configNetworkTransmitStatus @55 :UInt16;
        configNodeIdentityGet @56 :ConfigNodeIdentityGet;
        configNodeIdentitySet @57 :ConfigNodeIdentitySet;
        configNodeIdentityStatus @58 :ConfigNodeIdentityStatus;
        configNodeReset @59 :ConfigNodeReset;
        configNodeResetStatus @60 :ConfigNodeResetStatus;
        configRelayGet @61 :ConfigRelayGet;
        configRelaySet @62 :ConfigRelayStatus;
        configRelayStatus @63 :ConfigRelayStatus;
        configSigModelAppGet @64 :ConfigSIGModelAppGet;
        configSigModelAppList @65 :ConfigSIGModelAppList;
        configSigModelSubscriptionGet @66 :ConfigSIGModelSubscriptionGet;
        configSigModelSubscriptionList @67 :ConfigSIGModelSubscriptionList;
        configVendorModelAppGet @68 :ConfigVendorModelAppGet;
        configVendorModelAppList @69 :ConfigVendorModelAppList;
        configVendorModelSubscriptionGet @70 :ConfigVendorModelSubscriptionGet;
        configVendorModelSubscriptionList @71 :ConfigVendorModelSubscriptionList;
        silvairDebug @72 :DebugParams;
        silvairGateway @73 :GatewayConfigParams;
        genericOnoffGet @74 :GenericOnOffGet;
        genericOnoffSet :union {
            optional @75 :GenericOnOffSetOptional;
            minimal @76 :GenericOnOffSetMinimal;
        }
        genericOnoffSetUnacknowledged :union {
            optional @77 :GenericOnOffSetOptional;
            minimal @78 :GenericOnOffSetMinimal;
        }
        genericOnoffStatus :union {
            optional @79 :GenericOnOffStatusOptional;
            minimal @80 :GenericOnOffStatusMinimal;
        }
        genericBatteryGet @81 :GenericBatteryGet;
        genericBatteryStatus @82 :GenericBatteryStatus;
        genericLevelGet @83 :GenericLevelGet;
        genericLevelSet :union {
            optional @84 :GenericLevelSetOptional;
            minimal @85 :GenericLevelSetMinimal;
        }
        genericLevelSetUnacknowledged :union {
            optional @86 :GenericLevelSetOptional;
            minimal @87 :GenericLevelSetMinimal;
        }
        genericLevelStatus :union {
            optional @88 :GenericLevelStatusOptional;
            minimal @89 :GenericLevelStatusMinimal;
        }
        genericDeltaSet :union {
            optional @90 :GenericDeltaSetOptional;
            minimal @91 :GenericDeltaSetMinimal;
        }
        genericDeltaSetUnacknowledged :union {
            optional @92 :GenericDeltaSetOptional;
            minimal @93 :GenericDeltaSetMinimal;
        }
        genericMoveSet :union {
            optional @94 :GenericMoveSetOptional;
            minimal @95 :GenericMoveSetMinimal;
        }
        genericMoveSetUnacknowledged :union {
            optional @96 :GenericMoveSetOptional;
            minimal @97 :GenericMoveSetMinimal;
        }
        lightLightnessGet @98 :LightLightnessGet;
        lightLightnessSet :union {
            optional @99 :LightLightnessSetOptional;
            minimal @100 :LightLightnessSetMinimal;
        }
        lightLightnessSetUnacknowledged :union {
            optional @101 :LightLightnessSetOptional;
            minimal @102 :LightLightnessSetMinimal;
        }
        lightLightnessStatus :union {
            optional @103 :LightLightnessStatusOptional;
            minimal @104 :LightLightnessStatusMinimal;
        }
        lightLightnessLinearGet @105 :LightLightnessGet;
        lightLightnessLinearSet :union {
            optional @106 :LightLightnessSetOptional;
            minimal @107 :LightLightnessSetMinimal;
        }
        lightLightnessLinearSetUnacknowledged :union {
            optional @108 :LightLightnessSetOptional;
            minimal @109 :LightLightnessSetMinimal;
        }
        lightLightnessLinearStatus :union {
            optional @110 :LightLightnessStatusOptional;
            minimal @111 :LightLightnessStatusMinimal;
        }
        lightLightnessLastGet @112 :LightLightnessGet;
        lightLightnessLastStatus @113 :LightLightnessDefault;
        lightLightnessDefaultGet @114 :LightLightnessGet;
        lightLightnessDefaultStatus @115 :LightLightnessDefault;
        lightLightnessRangeGet @116 :LightLightnessGet;
        lightLightnessRangeStatus @117 :LightLightnessRangeStatus;
        lightLightnessSetupDefaultSet @118 :LightLightnessDefault;
        lightLightnessSetupDefaultSetUnacknowledged @119 :LightLightnessDefault;
        lightLightnessSetupRangeSet @120 :LightLightnessRange;
        lightLightnessSetupRangeSetUnacknowledged @121 :LightLightnessRange;
        lightCtlGet @122 :LightCTLGet;
        lightCtlSet :union {
            optional @123 :LightCTLSetOptional;
            minimal @124 :LightCTLSetMinimal;
        }
        lightCtlSetUnacknowledged :union {
            optional @125 :LightCTLSetOptional;
            minimal @126 :LightCTLSetMinimal;
        }
        lightCtlStatus :union {
            optional @127 :LightCTLStatusOptional;
            minimal @128 :LightCTLStatusMinimal;
        }
        lightCtlTemperatureGet @129 :LightCTLGet;
        lightCtlTemperatureRangeGet @130 :LightCTLGet;
        lightCtlTemperatureRangeStatus @131 :LightCTLRangeStatus;
        lightCtlTemperatureSet :union {
            optional @132 :LightCTLTemperatureSetOptional;
            minimal @133 :LightCTLTemperatureSetMinimal;
        }
        lightCtlTemperatureSetUnacknowledged :union {
            optional @134 :LightCTLTemperatureSetOptional;
            minimal @135 :LightCTLTemperatureSetMinimal;
        }
        lightCtlTemperatureStatus :union {
            optional @136 :LightCTLTemperatureStatusOptional;
            minimal @137 :LightCTLTemperatureStatusMinimal;
        }
        lightCtlTemperatureDefaultGet @138 :LightCTLGet;
        lightCtlTemperatureDefaultStatus @139 :LightCTLDefault;
        lightCtlSetupTemperatureDefaultSet @140 :LightCTLDefault;
        lightCtlSetupTemperatureDefaultSetUnacknowledged @141 :LightCTLDefault;
        lightCtlSetupTemperatureRangeSet @142 :LightCTLRange;
        lightCtlSetupTemperatureRangeSetUnacknowledged @143 :LightCTLRange;
        healthAttentionGet @144 :HealthAttentionGet;
        healthAttentionSet @145 :HealthAttentionStatus;
        healthAttentionSetUnacknowledged @146 :HealthAttentionStatus;
        healthAttentionStatus @147 :HealthAttentionStatus;
        healthCurrentStatus @148 :HealthFaultStatus;
        healthFaultClear @149 :HealthFaultClear;
        healthFaultClearUnacknowledged @150 :HealthFaultClear;
        healthFaultGet @151 :HealthFaultClear;
        healthFaultStatus @152 :HealthFaultStatus;
        healthFaultTest @153 :HealthFaultTest;
        healthFaultTestUnacknowledged @154 :HealthFaultTest;
        healthPeriodGet @155 :HealthPeriodGet;
        healthPeriodSet @156 :HealthPeriodStatus;
        healthPeriodSetUnacknowledged @157 :HealthPeriodStatus;
        healthPeriodStatus @158 :HealthPeriodStatus;
        silvairNds @159 :NetworkDiagnosticServerParams;
        silvairNdsSetup @160 :NetworkDiagnosticSetupServerParams;
        sceneGet @161 :SceneGet;
        sceneRecall :union {
            optional @162 :SceneRecallWithTransition;
            minimal @163 :SceneRecallMinimal;
        }
        sceneRecallUnacknowledged :union {
            optional @164 :SceneRecallWithTransition;
            minimal @165 :SceneRecallMinimal;
        }
        sceneStatus :union {
            optional @166 :SceneStatusWithTargetScene;
            minimal @167 :SceneStatusMinimal;
        }
        sceneRegisterGet @168 :SceneRegisterGet;
        sceneRegisterStatus @169 :SceneRegisterStatus;
        sceneStore @170 :SceneSetupWithValidation;
        sceneStoreUnacknowledged @171 :SceneSetupWithValidation;
        sceneDelete @172 :SceneSetup;
        sceneDeleteUnacknowledged @173 :SceneSetup;
        sensorDescriptorGet :union {
            optional @174 :SensorGetOptional;
            minimal @175 :SensorGetMinimal;
        }
        sensorDescriptorStatus @176 :List(SensorDescriptorStatusItem);
        sensorGet :union {
            optional @177 :SensorGetOptional;
            minimal @178 :SensorGetMinimal;
        }
        sensorStatus @179 :List(SensorData);
        sensorCadenceGet @180 :SensorGetOptional;
        sensorSettingsGet @181 :SensorSettingsGet;
        sensorSettingsStatus @182 :SensorSettingsStatus;
        sensorSettingGet @183 :SensorSettingGet;
        sensorSettingSet @184 :SensorSettingSet;
        sensorSettingSetUnacknowledged @185 :SensorSettingSet;
        sensorSettingStatus @186 :SensorSettingStatus;
        silvairLec @187 :LightExtendedControllerParams;
        timeGet @188 :TimeGet;
        timeSet @189 :TimeSet;
        timeStatus @190 :TimeStatus;
        timeZoneGet @191 :TimeZoneGet;
        timeZoneSet @192 :TimeZoneSet;
        timeZoneStatus @193 :TimeZoneStatus;
        taiUtcDeltaGet @194 :TAIUTCDeltaGet;
        taiUtcDeltaSet @195 :TAIUTCDeltaSet;
        taiUtcDeltaStatus @196 :TAIUTCDeltaStatus;
        timeRoleGet @197 :TimeRoleGet;
        timeRoleSet @198 :TimeRoleStatus;
        timeRoleStatus @199 :TimeRoleStatus;
        silvairDebugV2 @200 :DebugV2SubMessage;
        silvairRruleScheduler @201 :RRuleSchedulerSubMessage;
    }
}

struct ConfigAppKeyUpdate {
    appKeyIndex @0 :UInt16;
    netKeyIndex @1 :UInt16;
    appKey @2 :Data;
}

struct ConfigAppKeyDelete {
    appKeyIndex @0 :UInt16;
    netKeyIndex @1 :UInt16;
}

struct ConfigAppKeyGet {
    netKeyIndex @0 :UInt16;
}

struct ConfigAppKeyList {
    status @0 :UInt8;
    netKeyIndex @1 :UInt16;
    appKeyIndices @2 :List(UInt16);
}

struct ConfigAppKeyStatus {
    status @0 :UInt8;
    appKeyIndex @1 :UInt16;
    netKeyIndex @2 :UInt16;
}

struct ConfigBeaconGet {
}

struct ConfigBeaconStatus {
    beacon @0 :UInt8;
}

struct ConfigCompositionDataGet {
    page @0 :UInt8;
}

struct ConfigCompositionDataStatus {
    page @0 :UInt8;
    union {
        zero @1 :CompositionDataPage0;
        first @2 :CompositionDataPage1;
        second @3 :CompositionDataPage2;
        twoHundredAndFiftyFifth @4 :Data;
    }
}

struct CompositionDataPage0 {
    cid @0 :UInt16;
    pid @1 :UInt16;
    vid @2 :UInt16;
    crpl @3 :UInt16;
    features @4 :UInt16;
    elements @5 :List(CompositionDataPage0Element);
}

struct CompositionDataPage0Element {
    location @0 :UInt16;
    sigNumber @1 :UInt8;
    vendorNumber @2 :UInt8;
    sigModels @3 :List(SIGModelId);
    vendorModels @4 :List(VendorModelId);
}

struct SIGModelId {
    modelId @0 :UInt16;
}

struct VendorModelId {
    vendorId @0 :UInt16;
    modelId @1 :UInt16;
}

struct CompositionDataPage1 {
    element @0 :List(CompositionDataPage1Element);
}

struct CompositionDataPage1Element {
    numberS @0 :UInt8;
    numberV @1 :UInt8;
    sigModels @2 :List(ModelRelationItem);
    vendorModels @3 :List(ModelRelationItem);
}

struct ModelRelationItem {
    extendedItemsCount @0 :UInt8;
    format @1 :Bool;
    correspondingPresent @2 :Bool;
    correspondingId :union {
        true @3 :UInt8;
        false @4 :ConfigMessageParams;
    }
    extendedModelsItems :union {
        true @5 :List(ExtendedModelShortFormat);
        false @6 :List(ExtendedModelLongFormat);
    }
}

struct ConfigMessageParams {
}

struct ExtendedModelShortFormat {
    modelItemIndex @0 :UInt8;
    elementOffset @1 :UInt8;
}

struct ExtendedModelLongFormat {
    modelItemIndex @0 :UInt8;
    elementOffset @1 :Int8;
}

struct CompositionDataPage2 {
    recordList @0 :List(MeshProfileEntry);
}

struct MeshProfileEntry {
    meshProfileIdentifier @0 :UInt16;
    version @1 :Version;
    numElementOffsets @2 :UInt8;
    elementOffsetList @3 :List(UInt8);
    additionalDataLen @4 :UInt16;
    additionalData @5 :List(UInt8);
}

struct Version {
    versionX @0 :UInt8;
    versionY @1 :UInt8;
    versionZ @2 :UInt8;
}

struct ConfigDefaultTTLGet {
}

struct ConfigDefaultTTLStatus {
    ttl @0 :UInt8;
}

struct ConfigFriendGet {
}

struct ConfigFriendStatus {
    friend @0 :UInt8;
}

struct ConfigGATTProxyGet {
}

struct ConfigGATTProxyStatus {
    gattProxy @0 :UInt8;
}

struct ConfigHeartbeatPublicationGet {
}

struct ConfigHeartbeatPublicationSet {
    destination @0 :UInt16;
    count @1 :UInt8;
    period @2 :UInt8;
    ttl @3 :UInt8;
    features @4 :List(UInt8);
    netKeyIndex @5 :UInt16;
}

struct ConfigHeartbeatPublicationStatus {
    status @0 :UInt8;
    destination @1 :UInt16;
    count @2 :UInt8;
    period @3 :UInt8;
    ttl @4 :UInt8;
    features @5 :List(UInt8);
    netKeyIndex @6 :UInt16;
}

struct ConfigHeartbeatSubscriptionGet {
}

struct ConfigHeartbeatSubscriptionSet {
    source @0 :UInt16;
    destination @1 :UInt16;
    periodLog @2 :UInt8;
}

struct ConfigHeartbeatSubscriptionStatus {
    status @0 :UInt8;
    source @1 :UInt16;
    destination @2 :UInt16;
    periodLog @3 :UInt8;
    count @4 :UInt8;
    minHops @5 :UInt8;
    maxHops @6 :UInt8;
}

struct ConfigKeyRefreshPhaseGet {
    netKeyIndex @0 :UInt16;
}

struct ConfigKeyRefreshPhaseSet {
    netKeyIndex @0 :UInt16;
    transition @1 :UInt8;
}

struct ConfigKeyRefreshPhaseStatus {
    status @0 :UInt8;
    netKeyIndex @1 :UInt16;
    phase @2 :UInt8;
}

struct ConfigLowPowerNodePollTimeoutGet {
    lpnAddress @0 :UInt16;
}

struct ConfigLowPowerNodePollTimeoutStatus {
    lpnAddress @0 :UInt16;
    pollTimeout @1 :UInt32;
}

struct ConfigModelAppUnbind {
    elementAddress @0 :UInt16;
    appKeyIndex @1 :UInt16;
    model :union {
        vendor @2 :VendorModelId;
        sig @3 :SIGModelId;
    }
}

struct ConfigModelAppStatus {
    status @0 :UInt8;
    elementAddress @1 :UInt16;
    appKeyIndex @2 :UInt16;
    model :union {
        vendor @3 :VendorModelId;
        sig @4 :SIGModelId;
    }
}

struct ConfigModelPublicationGet {
    elementAddress @0 :UInt16;
    model :union {
        vendor @1 :VendorModelId;
        sig @2 :SIGModelId;
    }
}

struct ConfigModelPublicationSet {
    elementAddress @0 :UInt16;
    publishAddress @1 :UInt16;
    rfu @2 :UInt8;
    credentialFlag @3 :Bool;
    appKeyIndex @4 :UInt16;
    ttl @5 :UInt8;
    publishPeriod @6 :PublishPeriod;
    retransmit @7 :UInt16;
    model :union {
        vendor @8 :VendorModelId;
        sig @9 :SIGModelId;
    }
}

struct PublishPeriod {
    stepResolution @0 :UInt8;
    numberOfSteps @1 :UInt8;
}

struct ConfigModelPublicationStatus {
    status @0 :UInt8;
    elementAddress @1 :UInt16;
    publishAddress @2 :UInt16;
    rfu @3 :UInt8;
    credentialFlag @4 :Bool;
    appKeyIndex @5 :UInt16;
    ttl @6 :UInt8;
    publishPeriod @7 :PublishPeriod;
    retransmit @8 :UInt16;
    model :union {
        vendor @9 :VendorModelId;
        sig @10 :SIGModelId;
    }
}

struct ConfigModelPublicationVASet {
    elementAddress @0 :UInt16;
    publishAddress @1 :Data;
    rfu @2 :UInt8;
    credentialFlag @3 :Bool;
    appKeyIndex @4 :UInt16;
    ttl @5 :UInt8;
    publishPeriod @6 :PublishPeriod;
    retransmit @7 :UInt16;
    model :union {
        vendor @8 :VendorModelId;
        sig @9 :SIGModelId;
    }
}

struct ConfigModelSubscriptionOverwrite {
    elementAddress @0 :UInt16;
    address @1 :UInt16;
    model :union {
        vendor @2 :VendorModelId;
        sig @3 :SIGModelId;
    }
}

struct ConfigModelSubscriptionDeleteAll {
    elementAddress @0 :UInt16;
    model :union {
        vendor @1 :VendorModelId;
        sig @2 :SIGModelId;
    }
}

struct ConfigModelSubscriptionStatus {
    status @0 :UInt8;
    elementAddress @1 :UInt16;
    address @2 :UInt16;
    model :union {
        vendor @3 :VendorModelId;
        sig @4 :SIGModelId;
    }
}

struct ConfigModelSubscriptionVAOverwrite {
    elementAddress @0 :UInt16;
    label @1 :Data;
    model :union {
        vendor @2 :VendorModelId;
        sig @3 :SIGModelId;
    }
}

struct ConfigNetKeyUpdate {
    netKeyIndex @0 :UInt16;
    netKey @1 :Data;
}

struct ConfigNetKeyDelete {
    netKeyIndex @0 :UInt16;
}

struct ConfigNetKeyGet {
}

struct ConfigNetKeyList {
    netKeyIndices @0 :List(UInt16);
}

struct ConfigNetKeyStatus {
    status @0 :UInt8;
    netKeyIndex @1 :UInt16;
}

struct ConfigNetworkTransmitGet {
}

struct ConfigNodeIdentityGet {
    netKeyIndex @0 :UInt16;
}

struct ConfigNodeIdentitySet {
    netKeyIndex @0 :UInt16;
    identity @1 :UInt8;
}

struct ConfigNodeIdentityStatus {
    status @0 :UInt8;
    netKeyIndex @1 :UInt16;
    identity @2 :UInt8;
}

struct ConfigNodeReset {
}

struct ConfigNodeResetStatus {
}

struct ConfigRelayGet {
}

struct ConfigRelayStatus {
    relay @0 :UInt8;
    retransmit @1 :UInt16;
}

struct ConfigSIGModelAppGet {
    elementAddress @0 :UInt16;
    model @1 :SIGModelId;
}

struct ConfigSIGModelAppList {
    status @0 :UInt8;
    elementAddress @1 :UInt16;
    model @2 :SIGModelId;
    appKeyIndices @3 :List(UInt16);
}

struct ConfigSIGModelSubscriptionGet {
    elementAddress @0 :UInt16;
    model @1 :SIGModelId;
}

struct ConfigSIGModelSubscriptionList {
    status @0 :UInt8;
    elementAddress @1 :UInt16;
    model @2 :SIGModelId;
    addresses @3 :List(UInt16);
}

struct ConfigVendorModelAppGet {
    elementAddress @0 :UInt16;
    model @1 :VendorModelId;
}

struct ConfigVendorModelAppList {
    status @0 :UInt8;
    elementAddress @1 :UInt16;
    model @2 :VendorModelId;
    appKeyIndices @3 :List(UInt16);
}

struct ConfigVendorModelSubscriptionGet {
    elementAddress @0 :UInt16;
    model @1 :VendorModelId;
}

struct ConfigVendorModelSubscriptionList {
    status @0 :UInt8;
    elementAddress @1 :UInt16;
    model @2 :VendorModelId;
    addresses @3 :List(UInt16);
}

struct DebugParams {
    subopcode @0 :UInt8;
    union {
        rssiThresholdGet @1 :RssiThresholdGet;
        rssiThresholdSet @2 :RssiThreshold;
        rssiThresholdStatus @3 :RssiThreshold;
        radioTest @4 :RadioTest;
        uptimeGet @5 :UptimeGet;
        uptimeStatus @6 :UptimeStatus;
        lastSwFaultGet @7 :LastSwFaultGet;
        lastSwFaultClear @8 :LastSwFaultClear;
        lastSwFaultStatus @9 :LastFdsFaultStatus;
        systemStatsGet @10 :SystemStatsGet;
        systemStatsStatus @11 :SystemStatsStatus;
        lastMallocFaultGet @12 :LastMallocFaultGet;
        lastMallocFaultClear @13 :LastMallocFaultClear;
        lastMallocFaultStatus @14 :LastFdsFaultStatus;
        lastFdsFaultGet @15 :LastFdsFaultGet;
        lastFdsFaultClear @16 :LastFdsFaultClear;
        lastFdsFaultStatus @17 :LastFdsFaultStatus;
        bytesBeforeGarbageCollectorGet @18 :BytesBeforeGarbageCollectorGet;
        bytesBeforeGarbageCollectorStatus @19 :BytesBeforeGarbageCollectorStatus;
        provisionedAppVersionGet @20 :ProvisionedAppVersionGet;
        provisionedAppVersionStatus @21 :ProvisionedAppVersionStatus;
        fullFirmwareVersionGet @22 :FullFirmwareVersionGet;
        fullFirmwareVersionStatus @23 :FullFirmwareVersionStatus;
        ivIndexGet @24 :IvIndexGet;
        ivIndexStatus @25 :IvIndexStatus;
        garbageCollectorCounterGet @26 :GarbageCollectorCounterGet;
        garbageCollectorCounterStatus @27 :GarbageCollectorCounterStatus;
        arapListSizeGet @28 :ArapListSizeGet;
        arapListSizeStatus :union {
            new @29 :ArapSize16;
            old @30 :ArapSize8;
        }
        arapListContentGet @31 :ArapListContentGet;
        arapListContentStatus @32 :ArapListContentStatus;
    }
}

struct RssiThresholdGet {
}

struct RssiThreshold {
    rssiThreshold @0 :UInt8;
}

struct RadioTest {
    packetCounter @0 :UInt8;
}

struct UptimeGet {
}

struct UptimeStatus {
    uptime @0 :UInt32;
}

struct LastSwFaultGet {
}

struct LastSwFaultClear {
}

struct LastFdsFaultStatus {
    time @0 :UInt32;
    fault @1 :Text;
}

struct SystemStatsGet {
}

struct SystemStatsStatus {
    stats @0 :List(SystemStat);
}

struct SystemStat {
    name @0 :Text;
    highWaterMark @1 :UInt32;
}

struct LastMallocFaultGet {
}

struct LastMallocFaultClear {
}

struct LastFdsFaultGet {
}

struct LastFdsFaultClear {
}

struct BytesBeforeGarbageCollectorGet {
}

struct BytesBeforeGarbageCollectorStatus {
    bytesLeft @0 :UInt16;
}

struct ProvisionedAppVersionGet {
}

struct ProvisionedAppVersionStatus {
    version @0 :UInt16;
}

struct FullFirmwareVersionGet {
}

struct FullFirmwareVersionStatus {
    version @0 :Text;
}

struct IvIndexGet {
}

struct IvIndexStatus {
    ivindex @0 :UInt32;
}

struct GarbageCollectorCounterGet {
}

struct GarbageCollectorCounterStatus {
    counter @0 :UInt16;
}

struct ArapListSizeGet {
}

struct ArapSize16 {
    capacity @0 :UInt16;
    size @1 :UInt16;
}

struct ArapSize8 {
    capacity @0 :UInt8;
    size @1 :UInt8;
}

struct ArapListContentGet {
    page @0 :UInt8;
}

struct ArapListContentStatus {
    currentPage @0 :UInt8;
    lastPage @1 :UInt8;
    nodes @2 :List(ArapNode);
}

struct ArapNode {
    sequence @0 :UInt32;
    ivi @1 :UInt8;
    address @2 :UInt16;
}

struct GatewayConfigParams {
    subopcode @0 :UInt8;
    union {
        gatewayConfigurationSet :union {
            static @1 :ConfigurationSetWithOptionalDhcpDisabled;
            dns @2 :ConfigurationSetWithOptionalDhcpEnabledWithStaticDns;
            minimal @3 :ConfigurationSetWithoutOptionalAutoDhcpEnabled;
        }
        mtuSizeSet @4 :ConfigurationSetMtu;
        ethernetMacAddressSet @5 :ConfigurationSetMacAddr;
        serverAddressAndPortNumberSet @6 :ConfigurationSetServerAddrAndPortNr;
        reconnectIntervalSet @7 :ConfigurationSetReconnectInterval;
        dnsIpAddressSet @8 :ConfigurationSetDnsIpAddr;
        ipAddressSet @9 :ConfigurationSetIpAddr;
        gatewayIpAddressSet @10 :ConfigurationSetGatewayIpAddr;
        netmaskSet @11 :ConfigurationSetNetmask;
        gatewayConfigurationStatus @12 :ConfigurationStatus;
        gatewayPacketsStatus @13 :PacketsStatus;
    }
}

struct ConfigurationSetWithOptionalDhcpDisabled {
    mtuSize @0 :UInt16;
    macAddress @1 :Data;
    serverPortNumber @2 :UInt16;
    reconnectInterval @3 :UInt16;
    serverAddressLength @4 :UInt8;
    serverAddress @5 :Text;
    dnsIpAddress @6 :Data;
    ipAddress @7 :Data;
    gatewayIpAddress @8 :Data;
    netmask @9 :UInt8;
}

struct ConfigurationSetWithOptionalDhcpEnabledWithStaticDns {
    mtuSize @0 :UInt16;
    macAddress @1 :Data;
    serverPortNumber @2 :UInt16;
    reconnectInterval @3 :UInt16;
    serverAddressLength @4 :UInt8;
    serverAddress @5 :Text;
    dnsIpAddress @6 :Data;
}

struct ConfigurationSetWithoutOptionalAutoDhcpEnabled {
    mtuSize @0 :UInt16;
    macAddress @1 :Data;
    serverPortNumber @2 :UInt16;
    reconnectInterval @3 :UInt16;
    serverAddressLength @4 :UInt8;
    serverAddress @5 :Text;
}

struct ConfigurationSetMtu {
    mtuSize @0 :UInt16;
}

struct ConfigurationSetMacAddr {
    macAddress @0 :Data;
}

struct ConfigurationSetServerAddrAndPortNr {
    serverPortNumber @0 :UInt16;
    serverAddressLength @1 :UInt8;
    serverAddress @2 :Text;
}

struct ConfigurationSetReconnectInterval {
    reconnectInterval @0 :UInt16;
}

struct ConfigurationSetDnsIpAddr {
    dnsIpAddress @0 :Data;
}

struct ConfigurationSetIpAddr {
    ipAddress @0 :Data;
}

struct ConfigurationSetGatewayIpAddr {
    gatewayIpAddress @0 :Data;
}

struct ConfigurationSetNetmask {
    netmask @0 :UInt8;
}

struct ConfigurationStatus {
    chipRevisionId @0 :UInt8;
    mtuSize @1 :UInt16;
    macAddress @2 :Data;
    serverPortNumber @3 :UInt16;
    reconnectInterval @4 :UInt16;
    serverAddressLength @5 :UInt8;
    serverAddress @6 :Text;
    dnsIpAddress @7 :Data;
    ipAddress @8 :Data;
    gatewayIpAddress @9 :Data;
    netmask @10 :UInt8;
    flags @11 :UInt8;
    statusCode @12 :UInt8;
}

struct PacketsStatus {
    totalEthRxErrors @0 :UInt16;
    totalEthTxErrors @1 :UInt16;
    bandwidth @2 :UInt16;
    connectionState @3 :ConnectionState;
}

struct ConnectionState {
    connState @0 :UInt8;
    linkStatus @1 :UInt8;
    lastError @2 :UInt8;
}

struct GenericOnOffGet {
}

struct GenericOnOffSetOptional {
    onoff @0 :UInt8;
    tid @1 :UInt8;
    transitionTime @2 :Float32;
    delay @3 :Float32;
}

struct GenericOnOffSetMinimal {
    onoff @0 :UInt8;
    tid @1 :UInt8;
}

struct GenericOnOffStatusOptional {
    presentOnoff @0 :UInt8;
    targetOnoff @1 :UInt8;
    remainingTime @2 :Float32;
}

struct GenericOnOffStatusMinimal {
    presentOnoff @0 :UInt8;
}

struct GenericBatteryGet {
}

struct GenericBatteryStatus {
    batteryLevel @0 :Float64;
    timeToDischarge @1 :Float64;
    timeToCharge @2 :Float64;
    flags @3 :BatteryFlags;
}

struct BatteryFlags {
    batteryServiceabilityFlags @0 :UInt8;
    batteryChargingFlags @1 :UInt8;
    batteryIndicatorFlags @2 :UInt8;
    batteryPresenceFlags @3 :UInt8;
}

struct GenericLevelGet {
}

struct GenericLevelSetOptional {
    level @0 :Int16;
    tid @1 :UInt8;
    transitionTime @2 :Float32;
    delay @3 :Float32;
}

struct GenericLevelSetMinimal {
    level @0 :Int16;
    tid @1 :UInt8;
}

struct GenericLevelStatusOptional {
    presentLevel @0 :Int16;
    targetLevel @1 :Int16;
    remainingTime @2 :Float32;
}

struct GenericLevelStatusMinimal {
    presentLevel @0 :Int16;
}

struct GenericDeltaSetOptional {
    deltaLevel @0 :Int32;
    tid @1 :UInt8;
    transitionTime @2 :Float32;
    delay @3 :Float32;
}

struct GenericDeltaSetMinimal {
    deltaLevel @0 :Int32;
    tid @1 :UInt8;
}

struct GenericMoveSetOptional {
    deltaLevel @0 :Int16;
    tid @1 :UInt8;
    transitionTime @2 :Float32;
    delay @3 :Float32;
}

struct GenericMoveSetMinimal {
    deltaLevel @0 :Int16;
    tid @1 :UInt8;
}

struct LightLightnessGet {
}

struct LightLightnessSetOptional {
    lightness @0 :UInt16;
    tid @1 :UInt8;
    transitionTime @2 :Float32;
    delay @3 :Float32;
}

struct LightLightnessSetMinimal {
    lightness @0 :UInt16;
    tid @1 :UInt8;
}

struct LightLightnessStatusOptional {
    presentLightness @0 :UInt16;
    targetLightness @1 :UInt16;
    remainingTime @2 :Float32;
}

struct LightLightnessStatusMinimal {
    presentLightness @0 :UInt16;
}

struct LightLightnessDefault {
    lightness @0 :UInt16;
}

struct LightLightnessRangeStatus {
    status @0 :UInt8;
    rangeMin @1 :UInt16;
    rangeMax @2 :UInt16;
}

struct LightLightnessRange {
    rangeMin @0 :UInt16;
    rangeMax @1 :UInt16;
}

struct LightCTLGet {
}

struct LightCTLSetOptional {
    ctlLightness @0 :UInt16;
    ctlTemperature @1 :UInt16;
    ctlDeltaUv @2 :UInt16;
    tid @3 :UInt8;
    transitionTime @4 :Float32;
    delay @5 :Float32;
}

struct LightCTLSetMinimal {
    ctlLightness @0 :UInt16;
    ctlTemperature @1 :UInt16;
    ctlDeltaUv @2 :UInt16;
    tid @3 :UInt8;
}

struct LightCTLStatusOptional {
    presentCtlLightness @0 :UInt16;
    presentCtlTemperature @1 :UInt16;
    targetCtlLightness @2 :UInt16;
    targetCtlTemperature @3 :UInt16;
    remainingTime @4 :Float32;
}

struct LightCTLStatusMinimal {
    presentCtlLightness @0 :UInt16;
    presentCtlTemperature @1 :UInt16;
}

struct LightCTLRangeStatus {
    status @0 :UInt8;
    rangeMin @1 :UInt16;
    rangeMax @2 :UInt16;
}

struct LightCTLTemperatureSetOptional {
    ctlTemperature @0 :UInt16;
    ctlDeltaUv @1 :UInt16;
    tid @2 :UInt8;
    transitionTime @3 :Float32;
    delay @4 :Float32;
}

struct LightCTLTemperatureSetMinimal {
    ctlTemperature @0 :UInt16;
    ctlDeltaUv @1 :UInt16;
    tid @2 :UInt8;
}

struct LightCTLTemperatureStatusOptional {
    presentCtlTemperature @0 :UInt16;
    presentCtlDeltaUv @1 :UInt16;
    targetCtlTemperature @2 :UInt16;
    targetCtlDeltaUv @3 :UInt16;
    remainingTime @4 :Float32;
}

struct LightCTLTemperatureStatusMinimal {
    presentCtlTemperature @0 :UInt16;
    presentCtlDeltaUv @1 :UInt16;
}

struct LightCTLDefault {
    ctlLightness @0 :UInt16;
    ctlTemperature @1 :UInt16;
    ctlDeltaUv @2 :UInt16;
}

struct LightCTLRange {
    rangeMin @0 :UInt16;
    rangeMax @1 :UInt16;
}

struct HealthAttentionGet {
}

struct HealthAttentionStatus {
    attention @0 :UInt8;
}

struct HealthFaultStatus {
    testId @0 :UInt8;
    companyId @1 :UInt16;
    faultArray @2 :List(UInt8);
}

struct HealthFaultClear {
    companyId @0 :UInt16;
}

struct HealthFaultTest {
    testId @0 :UInt8;
    companyId @1 :UInt16;
}

struct HealthPeriodGet {
}

struct HealthPeriodStatus {
    fastPeriodDivisor @0 :UInt8;
}

struct NetworkDiagnosticServerParams {
    subopcode @0 :UInt8;
    union {
        subscriptionGet @1 :NetworkDiagnosticServerSubscriptionGet;
        subscriptionSet @2 :NetworkDiagnosticServerSubscriptionSet;
        subscriptionSetUnacknowledged @3 :NetworkDiagnosticServerSubscriptionSet;
        subscriptionStatus @4 :NetworkDiagnosticServerSubscriptionStatus;
        radioStatGet @5 :NetworkDiagnosticServerRadioStatGet;
    }
}

struct NetworkDiagnosticServerSubscriptionGet {
}

struct NetworkDiagnosticServerSubscriptionSet {
    destination @0 :UInt16;
    period @1 :UInt16;
}

struct NetworkDiagnosticServerSubscriptionStatus {
    destination @0 :UInt16;
    period @1 :UInt16;
    maxRecordCount @2 :UInt8;
    record @3 :List(RegistryRecord);
}

struct RegistryRecord {
    source @0 :UInt16;
    count @1 :UInt16;
    minHops @2 :UInt8;
    maxHops @3 :UInt8;
}

struct NetworkDiagnosticServerRadioStatGet {
}

struct NetworkDiagnosticSetupServerParams {
    subopcode @0 :UInt8;
    union {
        publicationGet @1 :NetworkDiagnosticSetupServerPublicationGet;
        publicationSet :union {
            optional @2 :NetworkDiagnosticSetupServerPublicationSetOptional;
            minimal @3 :NetworkDiagnosticSetupServerPublicationSetMinimal;
        }
        publicationStatus :union {
            optional @4 :NetworkDiagnosticSetupServerPublicationSetOptional;
            minimal @5 :NetworkDiagnosticSetupServerPublicationSetMinimal;
        }
    }
}

struct NetworkDiagnosticSetupServerPublicationGet {
}

struct NetworkDiagnosticSetupServerPublicationSetOptional {
    destination @0 :UInt16;
    count @1 :UInt16;
    period @2 :TransitionTime;
    ttl @3 :UInt8;
    netKeyIndex @4 :UInt16;
    features @5 :UInt16;
}

struct TransitionTime {
    resolution @0 :UInt8;
    steps @1 :UInt8;
}

struct NetworkDiagnosticSetupServerPublicationSetMinimal {
    destination @0 :UInt16;
    count @1 :UInt16;
    period @2 :TransitionTime;
    ttl @3 :UInt8;
    netKeyIndex @4 :UInt16;
}

struct SceneGet {
}

struct SceneRecallWithTransition {
    sceneNumber @0 :UInt16;
    tid @1 :UInt8;
    transitionTime @2 :Float32;
    delay @3 :Float32;
}

struct SceneRecallMinimal {
    sceneNumber @0 :UInt16;
    tid @1 :UInt8;
}

struct SceneStatusWithTargetScene {
    statusCode @0 :UInt8;
    currentScene @1 :UInt16;
    targetScene @2 :UInt16;
    remainingTime @3 :Float32;
}

struct SceneStatusMinimal {
    statusCode @0 :UInt8;
    currentScene @1 :UInt16;
}

struct SceneRegisterGet {
}

struct SceneRegisterStatus {
    statusCode @0 :UInt8;
    currentScene @1 :UInt16;
    scenes @2 :List(UInt16);
}

struct SceneSetupWithValidation {
    sceneNumber @0 :UInt16;
}

struct SceneSetup {
    sceneNumber @0 :UInt16;
}

struct SensorGetOptional {
    propertyId @0 :UInt16;
}

struct SensorGetMinimal {
}

struct SensorDescriptorStatusItem {
    union {
        optional @0 :SensorDescriptorOptional;
        minimal @1 :SensorDescriptorMinimal;
    }
}

struct SensorDescriptorOptional {
    sensorPropertyId @0 :UInt16;
    sensorPositiveTolerance @1 :UInt16;
    sensorNegativeTolerance @2 :UInt16;
    sensorSamplingFuncion @3 :UInt8;
    sensorMeasurementPeriod @4 :UInt8;
    sensorUpdateInterval @5 :UInt8;
}

struct SensorDescriptorMinimal {
    sensorPropertyId @0 :UInt16;
}

struct SensorData {
    format @0 :UInt8;
    length @1 :UInt16;
    sensorSettingPropertyId @2 :UInt16;
    union {
        averageAmbientTemperatureInAPeriodOfDay @3 :Temperature8InAPeriodOfDay;
        averageInputCurrent @4 :AverageCurrent;
        averageInputVoltage @5 :AverageVoltage;
        averageOutputCurrent @6 :AverageCurrent;
        averageOutputVoltage @7 :AverageVoltage;
        centerBeamIntensityAtFullPower @8 :LuminousIntensity;
        chromaticityTolerance @9 :ChromaticityTolerance;
        colorRenderingIndexR9 @10 :ColorRenderingIndex;
        colorRenderingIndexRa @11 :ColorRenderingIndex;
        deviceAppearance @12 :Appearance;
        deviceCountryOfOrigin @13 :CountryCode;
        deviceDateOfManufacture @14 :DateUTC;
        deviceEnergyUseSinceTurnOn @15 :Energy;
        deviceFirmwareRevision @16 :Text;
        deviceGlobalTradeItemNumber @17 :GlobalTradeItemNumber;
        deviceHardwareRevision @18 :Text;
        deviceManufacturerName @19 :Text;
        deviceModelNumber @20 :Text;
        deviceOperatingTemperatureRangeSpecification @21 :TemperatureRange;
        deviceOperatingTemperatureStatisticalValues @22 :TemperatureStatistics;
        deviceOverTemperatureEventStatistics @23 :EventStatistics;
        devicePowerRangeSpecification @24 :PowerSpecification;
        deviceRuntimeSinceTurnOn @25 :TimeHour24;
        deviceRuntimeWarranty @26 :TimeHour24;
        deviceSerialNumber @27 :Text;
        deviceSoftwareRevision @28 :Text;
        deviceUnderTemperatureEventStatistics @29 :EventStatistics;
        indoorAmbientTemperatureStatisticalValues @30 :Temperature8Statistics;
        initialCie1931ChromaticityCoordinates @31 :ChromaticityCoordinates;
        initialCorrelatedColorTemperature @32 :CorrelatedColorTemperature;
        initialLuminousFlux @33 :LuminousFlux;
        initialPlanckianDistance @34 :ChromaticDistanceFromPlanckian;
        inputCurrentRangeSpecification @35 :ElectricCurrentSpecification;
        inputCurrentStatistics @36 :ElectricCurrentStatistics;
        inputOverCurrentEventStatistics @37 :EventStatistics;
        inputOverRippleVoltageEventStatistics @38 :EventStatistics;
        inputOverVoltageEventStatistics @39 :EventStatistics;
        inputUnderCurrentEventStatistics @40 :EventStatistics;
        inputUnderVoltageEventStatistics @41 :EventStatistics;
        inputVoltageRangeSpecification @42 :VoltageRange;
        inputVoltageRippleSpecification @43 :Percentage8;
        inputVoltageStatistics @44 :VoltageStatistics;
        lightControlAmbientLuxlevelOn @45 :Illuminance;
        lightControlAmbientLuxlevelProlong @46 :Illuminance;
        lightControlAmbientLuxlevelStandby @47 :Illuminance;
        lightControlLightnessOn @48 :PerceivedLightness;
        lightControlLightnessProlong @49 :PerceivedLightness;
        lightControlLightnessStandby @50 :PerceivedLightness;
        lightControlRegulatorAccuracy @51 :Percentage8;
        lightControlRegulatorKid @52 :Coefficient;
        lightControlRegulatorKiu @53 :Coefficient;
        lightControlRegulatorKpd @54 :Coefficient;
        lightControlRegulatorKpu @55 :Coefficient;
        lightControlTimeFade @56 :TimeMiliseconds24;
        lightControlTimeFadeOn @57 :TimeMiliseconds24;
        lightControlTimeFadeStandbyAuto @58 :TimeMiliseconds24;
        lightControlTimeFadeStandbyManual @59 :TimeMiliseconds24;
        lightControlTimeOccupancyDelay @60 :TimeMiliseconds24;
        lightControlTimeProlong @61 :TimeMiliseconds24;
        lightControlTimeRunOn @62 :TimeMiliseconds24;
        lumenMaintenanceFactor @63 :Percentage8;
        luminousEfficacy @64 :LuminousEfficacy;
        luminousEnergySinceTurnOn @65 :LuminousEnergy;
        luminousExposure @66 :LuminousExposure;
        luminousFluxRange @67 :LuminousFluxRange;
        motionSensed @68 :Percentage8;
        motionThreshold @69 :Percentage8;
        openCircuitEventStatistics @70 :EventStatistics;
        outdoorStatisticalValues @71 :Temperature8Statistics;
        outputCurrentRange @72 :ElectricCurrentRange;
        outputCurrentStatistics @73 :ElectricCurrentStatistics;
        outputRippleVoltageSpecification @74 :Percentage8;
        outputVoltageRange @75 :VoltageRange;
        outputVoltageStatistics @76 :VoltageStatistics;
        overOutputRippleVoltageEventStatistics @77 :EventStatistics;
        peopleCount @78 :Count16;
        presenceDetected @79 :Presence;
        presentAmbientLightLevel @80 :Illuminance;
        presentAmbientTemperature @81 :Temperature8;
        presentCie1931ChromaticityCoordinates @82 :ChromaticityCoordinates;
        presentCorrelatedColorTemperature @83 :CorrelatedColorTemperature;
        presentDeviceInputPower @84 :Power;
        presentDeviceOperatingEfficiency @85 :Percentage8;
        presentDeviceOperatingTemperature @86 :Temperature;
        presentIlluminance @87 :Illuminance;
        presentIndoorAmbientTemperature @88 :Temperature8;
        presentInputCurrent @89 :ElectricCurrent;
        presentInputRippleVoltage @90 :Percentage8;
        presentInputVoltage @91 :Voltage;
        presentLuminousFlux @92 :LuminousFlux;
        presentOutdoorAmbientTemperature @93 :Temperature8;
        presentOutputCurrent @94 :ElectricCurrent;
        presentOutputVoltage @95 :Voltage;
        presentPlanckianDistance @96 :ChromaticDistanceFromPlanckian;
        presentRelativeOutputRippleVoltage @97 :Percentage8;
        relativeDeviceEnergyUseInAPeriodOfDay @98 :EnergyInAPeriodOfDay;
        relativeDeviceRuntimeInAGenericLevelRange @99 :RelativeRuntimeInAGenericLevelRange;
        relativeExposureTimeInAnIlluminanceRange @100 :RelativeValueInAnIlluminanceRange;
        relativeRuntimeInACorrelatedColorTemperatureRange @101 :LuminousEnergy;
        relativeRuntimeInADeviceOperatingTemperatureRange @102 :RelativeValueInATemperatureRange;
        relativeRuntimeInAnInputCurrentRange @103 :RelativeValueInACurrentRange;
        relativeRuntimeInAnInputVoltageRange @104 :RelativeValueInAVoltageRange;
        shortCircuitEventStatistics @105 :EventStatistics;
        timeSinceMotionSensed @106 :TimeSecond16;
        timeSincePresenceDetected @107 :TimeSecond16;
        totalDeviceEnergyUse @108 :Energy;
        totalDeviceOffOnCycles @109 :Count24;
        totalDevicePowerOnCycles @110 :Count24;
        totalDevicePowerOnTime @111 :TimeHour24;
        totalDeviceRuntime @112 :TimeHour24;
        totalLightExposureTime @113 :TimeHour24;
        totalLuminousEnergy @114 :LuminousEnergy;
        preciseTotalDeviceEnergyUse @115 :PreciseEnergy;
    }
}

struct Temperature8InAPeriodOfDay {
    temperature @0 :Float64;
    startTime @1 :TimeDecihour8;
    endTime @2 :TimeDecihour8;
}

struct TimeDecihour8 {
    hour @0 :Float64;
}

struct AverageCurrent {
    electricCurrentValue @0 :Float64;
    sensingDuration @1 :TimeExponential8;
}

struct TimeExponential8 {
    seconds @0 :Float32;
}

struct AverageVoltage {
    voltageValue @0 :Float64;
    sensingDuration @1 :TimeExponential8;
}

struct LuminousIntensity {
    luminousIntensity @0 :Float64;
}

struct ChromaticityTolerance {
    chromaticityTolerance @0 :Float64;
}

struct ColorRenderingIndex {
    colorRenderingIndex @0 :Float64;
}

struct Appearance {
    category @0 :UInt16;
    subCategory @1 :UInt8;
}

struct CountryCode {
    countryCode @0 :Float64;
}

struct DateUTC {
    date @0 :SensorSetupMessageParams;
}

struct SensorMessageParams {
    year @0 :UInt16;
    month @1 :UInt8;
    day @2 :UInt8;
}

struct Energy {
    energy @0 :Float64;
}

struct GlobalTradeItemNumber {
    globalTradeItemNumber @0 :UInt64;
}

struct TemperatureRange {
    minimumTemperature @0 :Float64;
    maximumTemperature @1 :Float64;
}

struct TemperatureStatistics {
    averageTemperature @0 :Float64;
    standardDeviationTemperature @1 :Float64;
    minimumTemperature @2 :Float64;
    maximumTemperature @3 :Float64;
    sensingDuration @4 :TimeExponential8;
}

struct EventStatistics {
    numberOfEvents @0 :Count16;
    averageEventDuration @1 :TimeSecond16;
    timeElapsedSinceLastEvent @2 :TimeExponential8;
    sensingDuration @3 :TimeExponential8;
}

struct Count16 {
    count @0 :Float64;
}

struct TimeSecond16 {
    seconds @0 :Float64;
}

struct PowerSpecification {
    minimumPowerValue @0 :Float64;
    typicalPowerValue @1 :Float64;
    maximumPowerValue @2 :Float64;
}

struct TimeHour24 {
    hours @0 :Float64;
}

struct Temperature8Statistics {
    averageTemperature @0 :Float64;
    standardDeviationTemperature @1 :Float64;
    minimumTemperature @2 :Float64;
    maximumTemperature @3 :Float64;
    sensingDuration @4 :TimeExponential8;
}

struct ChromaticityCoordinates {
    chromaticityXCoordinate @0 :Float64;
    chromaticityYCoordinate @1 :Float64;
}

struct CorrelatedColorTemperature {
    correlatedColorTemperature @0 :Float64;
}

struct LuminousFlux {
    luminousFlux @0 :Float64;
}

struct ChromaticDistanceFromPlanckian {
    distanceFromPlanckian @0 :Float64;
}

struct ElectricCurrentSpecification {
    minimumElectricCurrentValue @0 :Float64;
    typicalElectricCurrentValue @1 :Float64;
    maximumElectricCurrentValue @2 :Float64;
}

struct ElectricCurrentStatistics {
    averageElectricCurrentValue @0 :Float64;
    standardDeviationElectricCurrentValue @1 :Float64;
    minimumElectricCurrentValue @2 :Float64;
    maximumElectricCurrentValue @3 :Float64;
    sensingDuration @4 :TimeExponential8;
}

struct VoltageRange {
    minimumVoltageValue @0 :Float64;
    typicalVoltageValue @1 :Float64;
    maximumVoltageValue @2 :Float64;
}

struct Percentage8 {
    percentage @0 :Float64;
}

struct VoltageStatistics {
    averageVoltageValue @0 :Float64;
    standardDeviationVoltageValue @1 :Float64;
    minimumVoltageValue @2 :Float64;
    maximumVoltageValue @3 :Float64;
    sensingDuration @4 :TimeExponential8;
}

struct Illuminance {
    illuminance @0 :Float64;
}

struct PerceivedLightness {
    perceivedLightness @0 :UInt16;
}

struct Coefficient {
    coefficient @0 :Float64;
}

struct TimeMiliseconds24 {
    seconds @0 :Float64;
}

struct LuminousEfficacy {
    luminousEfficacy @0 :Float64;
}

struct LuminousEnergy {
    luminousEnergy @0 :Float64;
}

struct LuminousExposure {
    luminousExposure @0 :Float64;
}

struct LuminousFluxRange {
    minimumLuminousFlux @0 :Float64;
    maximumLuminousFlux @1 :Float64;
}

struct ElectricCurrentRange {
    minimumElectricCurrentValue @0 :Float64;
    maximumElectricCurrentValue @1 :Float64;
}

struct Presence {
    presenceDetected @0 :Bool;
}

struct Temperature8 {
    temperature @0 :Float64;
}

struct Power {
    power @0 :Float64;
}

struct Temperature {
    temperature @0 :Float64;
}

struct ElectricCurrent {
    current @0 :Float64;
}

struct Voltage {
    voltage @0 :Float64;
}

struct EnergyInAPeriodOfDay {
    energyValue @0 :Float64;
    startTime @1 :TimeDecihour8;
    endTime @2 :TimeDecihour8;
}

struct RelativeRuntimeInAGenericLevelRange {
    relativeValue @0 :Float64;
    minimumGenericLevel @1 :Float64;
    maximumGenericLevel @2 :Float64;
}

struct RelativeValueInAnIlluminanceRange {
    relativeValue @0 :Float64;
    minimumIlluminance @1 :Float64;
    maximumIlluminance @2 :Float64;
}

struct RelativeValueInATemperatureRange {
    relativeValue @0 :Float64;
    minimumTemperature @1 :Float64;
    maximumTemperature @2 :Float64;
}

struct RelativeValueInACurrentRange {
    relativeValue @0 :Float64;
    minimumCurrent @1 :Float64;
    maximumCurrent @2 :Float64;
}

struct RelativeValueInAVoltageRange {
    relativeValue @0 :Float64;
    minimumVoltage @1 :Float64;
    maximumVoltage @2 :Float64;
}

struct Count24 {
    count @0 :Float64;
}

struct PreciseEnergy {
    energy @0 :Float64;
}

struct SensorSettingsGet {
    sensorPropertyId @0 :UInt16;
}

struct SensorSettingsStatus {
    sensorPropertyId @0 :UInt16;
    sensorSettingPropertyIds @1 :List(UInt16);
}

struct SensorSettingGet {
    sensorPropertyId @0 :UInt16;
    sensorSettingPropertyId @1 :UInt16;
}

struct SensorSettingSet {
    sensorPropertyId @0 :UInt16;
    sensorSettingPropertyId @1 :UInt16;
    union {
        averageAmbientTemperatureInAPeriodOfDay @2 :Temperature8InAPeriodOfDay;
        averageInputCurrent @3 :AverageCurrent;
        averageInputVoltage @4 :AverageVoltage;
        averageOutputCurrent @5 :AverageCurrent;
        averageOutputVoltage @6 :AverageVoltage;
        centerBeamIntensityAtFullPower @7 :LuminousIntensity;
        chromaticityTolerance @8 :ChromaticityTolerance;
        colorRenderingIndexR9 @9 :ColorRenderingIndex;
        colorRenderingIndexRa @10 :ColorRenderingIndex;
        deviceAppearance @11 :Appearance;
        deviceCountryOfOrigin @12 :CountryCode;
        deviceDateOfManufacture @13 :DateUTC;
        deviceEnergyUseSinceTurnOn @14 :Energy;
        deviceFirmwareRevision @15 :Text;
        deviceGlobalTradeItemNumber @16 :GlobalTradeItemNumber;
        deviceHardwareRevision @17 :Text;
        deviceManufacturerName @18 :Text;
        deviceModelNumber @19 :Text;
        deviceOperatingTemperatureRangeSpecification @20 :TemperatureRange;
        deviceOperatingTemperatureStatisticalValues @21 :TemperatureStatistics;
        deviceOverTemperatureEventStatistics @22 :EventStatistics;
        devicePowerRangeSpecification @23 :PowerSpecification;
        deviceRuntimeSinceTurnOn @24 :TimeHour24;
        deviceRuntimeWarranty @25 :TimeHour24;
        deviceSerialNumber @26 :Text;
        deviceSoftwareRevision @27 :Text;
        deviceUnderTemperatureEventStatistics @28 :EventStatistics;
        indoorAmbientTemperatureStatisticalValues @29 :Temperature8Statistics;
        initialCie1931ChromaticityCoordinates @30 :ChromaticityCoordinates;
        initialCorrelatedColorTemperature @31 :CorrelatedColorTemperature;
        initialLuminousFlux @32 :LuminousFlux;
        initialPlanckianDistance @33 :ChromaticDistanceFromPlanckian;
        inputCurrentRangeSpecification @34 :ElectricCurrentSpecification;
        inputCurrentStatistics @35 :ElectricCurrentStatistics;
        inputOverCurrentEventStatistics @36 :EventStatistics;
        inputOverRippleVoltageEventStatistics @37 :EventStatistics;
        inputOverVoltageEventStatistics @38 :EventStatistics;
        inputUnderCurrentEventStatistics @39 :EventStatistics;
        inputUnderVoltageEventStatistics @40 :EventStatistics;
        inputVoltageRangeSpecification @41 :VoltageRange;
        inputVoltageRippleSpecification @42 :Percentage8;
        inputVoltageStatistics @43 :VoltageStatistics;
        lightControlAmbientLuxlevelOn @44 :Illuminance;
        lightControlAmbientLuxlevelProlong @45 :Illuminance;
        lightControlAmbientLuxlevelStandby @46 :Illuminance;
        lightControlLightnessOn @47 :PerceivedLightness;
        lightControlLightnessProlong @48 :PerceivedLightness;
        lightControlLightnessStandby @49 :PerceivedLightness;
        lightControlRegulatorAccuracy @50 :Percentage8;
        lightControlRegulatorKid @51 :Coefficient;
        lightControlRegulatorKiu @52 :Coefficient;
        lightControlRegulatorKpd @53 :Coefficient;
        lightControlRegulatorKpu @54 :Coefficient;
        lightControlTimeFade @55 :TimeMiliseconds24;
        lightControlTimeFadeOn @56 :TimeMiliseconds24;
        lightControlTimeFadeStandbyAuto @57 :TimeMiliseconds24;
        lightControlTimeFadeStandbyManual @58 :TimeMiliseconds24;
        lightControlTimeOccupancyDelay @59 :TimeMiliseconds24;
        lightControlTimeProlong @60 :TimeMiliseconds24;
        lightControlTimeRunOn @61 :TimeMiliseconds24;
        lumenMaintenanceFactor @62 :Percentage8;
        luminousEfficacy @63 :LuminousEfficacy;
        luminousEnergySinceTurnOn @64 :LuminousEnergy;
        luminousExposure @65 :LuminousExposure;
        luminousFluxRange @66 :LuminousFluxRange;
        motionSensed @67 :Percentage8;
        motionThreshold @68 :Percentage8;
        openCircuitEventStatistics @69 :EventStatistics;
        outdoorStatisticalValues @70 :Temperature8Statistics;
        outputCurrentRange @71 :ElectricCurrentRange;
        outputCurrentStatistics @72 :ElectricCurrentStatistics;
        outputRippleVoltageSpecification @73 :Percentage8;
        outputVoltageRange @74 :VoltageRange;
        outputVoltageStatistics @75 :VoltageStatistics;
        overOutputRippleVoltageEventStatistics @76 :EventStatistics;
        peopleCount @77 :Count16;
        presenceDetected @78 :Presence;
        presentAmbientLightLevel @79 :Illuminance;
        presentAmbientTemperature @80 :Temperature8;
        presentCie1931ChromaticityCoordinates @81 :ChromaticityCoordinates;
        presentCorrelatedColorTemperature @82 :CorrelatedColorTemperature;
        presentDeviceInputPower @83 :Power;
        presentDeviceOperatingEfficiency @84 :Percentage8;
        presentDeviceOperatingTemperature @85 :Temperature;
        presentIlluminance @86 :Illuminance;
        presentIndoorAmbientTemperature @87 :Temperature8;
        presentInputCurrent @88 :ElectricCurrent;
        presentInputRippleVoltage @89 :Percentage8;
        presentInputVoltage @90 :Voltage;
        presentLuminousFlux @91 :LuminousFlux;
        presentOutdoorAmbientTemperature @92 :Temperature8;
        presentOutputCurrent @93 :ElectricCurrent;
        presentOutputVoltage @94 :Voltage;
        presentPlanckianDistance @95 :ChromaticDistanceFromPlanckian;
        presentRelativeOutputRippleVoltage @96 :Percentage8;
        relativeDeviceEnergyUseInAPeriodOfDay @97 :EnergyInAPeriodOfDay;
        relativeDeviceRuntimeInAGenericLevelRange @98 :RelativeRuntimeInAGenericLevelRange;
        relativeExposureTimeInAnIlluminanceRange @99 :RelativeValueInAnIlluminanceRange;
        relativeRuntimeInACorrelatedColorTemperatureRange @100 :LuminousEnergy;
        relativeRuntimeInADeviceOperatingTemperatureRange @101 :RelativeValueInATemperatureRange;
        relativeRuntimeInAnInputCurrentRange @102 :RelativeValueInACurrentRange;
        relativeRuntimeInAnInputVoltageRange @103 :RelativeValueInAVoltageRange;
        shortCircuitEventStatistics @104 :EventStatistics;
        timeSinceMotionSensed @105 :TimeSecond16;
        timeSincePresenceDetected @106 :TimeSecond16;
        totalDeviceEnergyUse @107 :Energy;
        totalDeviceOffOnCycles @108 :Count24;
        totalDevicePowerOnCycles @109 :Count24;
        totalDevicePowerOnTime @110 :TimeHour24;
        totalDeviceRuntime @111 :TimeHour24;
        totalLightExposureTime @112 :TimeHour24;
        totalLuminousEnergy @113 :LuminousEnergy;
        preciseTotalDeviceEnergyUse @114 :PreciseEnergy;
    }
}

struct SensorSetupMessageParams {
    year @0 :UInt16;
    month @1 :UInt8;
    day @2 :UInt8;
}

struct SensorSettingStatus {
    sensorPropertyId @0 :UInt16;
    sensorSettingPropertyId @1 :UInt16;
    sensorSettingAccess @2 :UInt8;
    union {
        averageAmbientTemperatureInAPeriodOfDay @3 :Temperature8InAPeriodOfDay;
        averageInputCurrent @4 :AverageCurrent;
        averageInputVoltage @5 :AverageVoltage;
        averageOutputCurrent @6 :AverageCurrent;
        averageOutputVoltage @7 :AverageVoltage;
        centerBeamIntensityAtFullPower @8 :LuminousIntensity;
        chromaticityTolerance @9 :ChromaticityTolerance;
        colorRenderingIndexR9 @10 :ColorRenderingIndex;
        colorRenderingIndexRa @11 :ColorRenderingIndex;
        deviceAppearance @12 :Appearance;
        deviceCountryOfOrigin @13 :CountryCode;
        deviceDateOfManufacture @14 :DateUTC;
        deviceEnergyUseSinceTurnOn @15 :Energy;
        deviceFirmwareRevision @16 :Text;
        deviceGlobalTradeItemNumber @17 :GlobalTradeItemNumber;
        deviceHardwareRevision @18 :Text;
        deviceManufacturerName @19 :Text;
        deviceModelNumber @20 :Text;
        deviceOperatingTemperatureRangeSpecification @21 :TemperatureRange;
        deviceOperatingTemperatureStatisticalValues @22 :TemperatureStatistics;
        deviceOverTemperatureEventStatistics @23 :EventStatistics;
        devicePowerRangeSpecification @24 :PowerSpecification;
        deviceRuntimeSinceTurnOn @25 :TimeHour24;
        deviceRuntimeWarranty @26 :TimeHour24;
        deviceSerialNumber @27 :Text;
        deviceSoftwareRevision @28 :Text;
        deviceUnderTemperatureEventStatistics @29 :EventStatistics;
        indoorAmbientTemperatureStatisticalValues @30 :Temperature8Statistics;
        initialCie1931ChromaticityCoordinates @31 :ChromaticityCoordinates;
        initialCorrelatedColorTemperature @32 :CorrelatedColorTemperature;
        initialLuminousFlux @33 :LuminousFlux;
        initialPlanckianDistance @34 :ChromaticDistanceFromPlanckian;
        inputCurrentRangeSpecification @35 :ElectricCurrentSpecification;
        inputCurrentStatistics @36 :ElectricCurrentStatistics;
        inputOverCurrentEventStatistics @37 :EventStatistics;
        inputOverRippleVoltageEventStatistics @38 :EventStatistics;
        inputOverVoltageEventStatistics @39 :EventStatistics;
        inputUnderCurrentEventStatistics @40 :EventStatistics;
        inputUnderVoltageEventStatistics @41 :EventStatistics;
        inputVoltageRangeSpecification @42 :VoltageRange;
        inputVoltageRippleSpecification @43 :Percentage8;
        inputVoltageStatistics @44 :VoltageStatistics;
        lightControlAmbientLuxlevelOn @45 :Illuminance;
        lightControlAmbientLuxlevelProlong @46 :Illuminance;
        lightControlAmbientLuxlevelStandby @47 :Illuminance;
        lightControlLightnessOn @48 :PerceivedLightness;
        lightControlLightnessProlong @49 :PerceivedLightness;
        lightControlLightnessStandby @50 :PerceivedLightness;
        lightControlRegulatorAccuracy @51 :Percentage8;
        lightControlRegulatorKid @52 :Coefficient;
        lightControlRegulatorKiu @53 :Coefficient;
        lightControlRegulatorKpd @54 :Coefficient;
        lightControlRegulatorKpu @55 :Coefficient;
        lightControlTimeFade @56 :TimeMiliseconds24;
        lightControlTimeFadeOn @57 :TimeMiliseconds24;
        lightControlTimeFadeStandbyAuto @58 :TimeMiliseconds24;
        lightControlTimeFadeStandbyManual @59 :TimeMiliseconds24;
        lightControlTimeOccupancyDelay @60 :TimeMiliseconds24;
        lightControlTimeProlong @61 :TimeMiliseconds24;
        lightControlTimeRunOn @62 :TimeMiliseconds24;
        lumenMaintenanceFactor @63 :Percentage8;
        luminousEfficacy @64 :LuminousEfficacy;
        luminousEnergySinceTurnOn @65 :LuminousEnergy;
        luminousExposure @66 :LuminousExposure;
        luminousFluxRange @67 :LuminousFluxRange;
        motionSensed @68 :Percentage8;
        motionThreshold @69 :Percentage8;
        openCircuitEventStatistics @70 :EventStatistics;
        outdoorStatisticalValues @71 :Temperature8Statistics;
        outputCurrentRange @72 :ElectricCurrentRange;
        outputCurrentStatistics @73 :ElectricCurrentStatistics;
        outputRippleVoltageSpecification @74 :Percentage8;
        outputVoltageRange @75 :VoltageRange;
        outputVoltageStatistics @76 :VoltageStatistics;
        overOutputRippleVoltageEventStatistics @77 :EventStatistics;
        peopleCount @78 :Count16;
        presenceDetected @79 :Presence;
        presentAmbientLightLevel @80 :Illuminance;
        presentAmbientTemperature @81 :Temperature8;
        presentCie1931ChromaticityCoordinates @82 :ChromaticityCoordinates;
        presentCorrelatedColorTemperature @83 :CorrelatedColorTemperature;
        presentDeviceInputPower @84 :Power;
        presentDeviceOperatingEfficiency @85 :Percentage8;
        presentDeviceOperatingTemperature @86 :Temperature;
        presentIlluminance @87 :Illuminance;
        presentIndoorAmbientTemperature @88 :Temperature8;
        presentInputCurrent @89 :ElectricCurrent;
        presentInputRippleVoltage @90 :Percentage8;
        presentInputVoltage @91 :Voltage;
        presentLuminousFlux @92 :LuminousFlux;
        presentOutdoorAmbientTemperature @93 :Temperature8;
        presentOutputCurrent @94 :ElectricCurrent;
        presentOutputVoltage @95 :Voltage;
        presentPlanckianDistance @96 :ChromaticDistanceFromPlanckian;
        presentRelativeOutputRippleVoltage @97 :Percentage8;
        relativeDeviceEnergyUseInAPeriodOfDay @98 :EnergyInAPeriodOfDay;
        relativeDeviceRuntimeInAGenericLevelRange @99 :RelativeRuntimeInAGenericLevelRange;
        relativeExposureTimeInAnIlluminanceRange @100 :RelativeValueInAnIlluminanceRange;
        relativeRuntimeInACorrelatedColorTemperatureRange @101 :LuminousEnergy;
        relativeRuntimeInADeviceOperatingTemperatureRange @102 :RelativeValueInATemperatureRange;
        relativeRuntimeInAnInputCurrentRange @103 :RelativeValueInACurrentRange;
        relativeRuntimeInAnInputVoltageRange @104 :RelativeValueInAVoltageRange;
        shortCircuitEventStatistics @105 :EventStatistics;
        timeSinceMotionSensed @106 :TimeSecond16;
        timeSincePresenceDetected @107 :TimeSecond16;
        totalDeviceEnergyUse @108 :Energy;
        totalDeviceOffOnCycles @109 :Count24;
        totalDevicePowerOnCycles @110 :Count24;
        totalDevicePowerOnTime @111 :TimeHour24;
        totalDeviceRuntime @112 :TimeHour24;
        totalLightExposureTime @113 :TimeHour24;
        totalLuminousEnergy @114 :LuminousEnergy;
        preciseTotalDeviceEnergyUse @115 :PreciseEnergy;
    }
}

struct LightExtendedControllerParams {
    subopcode @0 :UInt8;
    union {
        propertyGet @1 :LightExtendedControllerPropertyGet;
        propertySet @2 :LightExtendedControllerPropertySet;
        propertyStatus @3 :LightExtendedControllerPropertyStatus;
        syncIntegralStatus @4 :LightExtendedControllerSyncIntegralStatus;
    }
}

struct LightExtendedControllerPropertyGet {
    id @0 :UInt16;
}

struct LightExtendedControllerPropertySet {
    id @0 :UInt16;
    value :union {
        autoResumeMode @1 :Bool;
        autoResumeTimer @2 :UInt32;
    }
}

struct LightExtendedControllerPropertyStatus {
    id @0 :UInt16;
    value :union {
        autoResumeMode @1 :Bool;
        autoResumeTimer @2 :UInt32;
    }
}

struct LightExtendedControllerSyncIntegralStatus {
    syncIntegral @0 :UInt16;
}

struct TimeGet {
}

struct TimeSet {
    date @0 :TimeMessageParams;
    taiUtcDelta @1 :Int16;
    timeAuthority @2 :Bool;
    uncertainty @3 :Float32;
}

struct TimeMessageParams {
    year @0 :UInt16;
    month @1 :UInt8;
    day @2 :UInt8;
    hour @3 :UInt8;
    minute @4 :UInt8;
    second @5 :UInt8;
    microsecond @6 :UInt32;
    timeZoneOffset @7 :Int16;
}

struct TimeStatus {
    date @0 :TimeMessageParams;
    taiUtcDelta @1 :Int16;
    timeAuthority @2 :Bool;
    uncertainty @3 :Float32;
}

struct TimeZoneGet {
}

struct TimeZoneSet {
    timeZoneOffsetNew @0 :UInt8;
    taiOfZoneChange @1 :UInt64;
}

struct TimeZoneStatus {
    timeZoneOffsetCurrent @0 :UInt8;
    timeZoneOffsetNew @1 :UInt8;
    taiOfZoneChange @2 :UInt64;
}

struct TAIUTCDeltaGet {
}

struct TAIUTCDeltaSet {
    taiUtcDeltaNew @0 :UInt16;
    taiOfDeltaChange @1 :UInt64;
}

struct TAIUTCDeltaStatus {
    taiUtcDeltaCurrent @0 :UInt16;
    taiUtcDeltaNew @1 :UInt16;
    taiOfDeltaChange @2 :UInt64;
}

struct TimeRoleGet {
}

struct TimeRoleStatus {
    timeRole @0 :UInt8;
}

struct DebugV2SubMessage {
    subopcode @0 :UInt8;
    parameterType @1 :UInt8;
    pageNumber @2 :UInt8;
    payload @3 :List(DebugV2Parameter);
}

struct DebugV2Parameter {
    dataType @0 :UInt8;
    union {
        uint8 @1 :UInt8;
        uint16 @2 :UInt16;
        uint32 @3 :UInt32;
        uint64 @4 :UInt64;
        int8 @5 :Int8;
        int16 @6 :Int16;
        int32 @7 :Int32;
        int64 @8 :Int64;
        float @9 :Float32;
        double @10 :Float64;
        enum @11 :UInt8;
        string @12 :Text;
        array @13 :List(UInt8);
        invalid @14 :DebugV2MessageParams;
    }
}

struct DebugV2MessageParams {
}

struct RRuleSchedulerSubMessage {
    subopcode @0 :UInt8;
    payload :union {
        rulesListGet @1 :RulesListGet;
        rulesListStatus @2 :RulesListStatus;
        registerMaxSizeGet @3 :RegisterMaxSizeGet;
        registerMaxSizeStatus @4 :RegisterMaxSizeStatus;
        schedulerModeGet @5 :SchedulerModeGet;
        schedulerModeSet @6 :SchedulerModeStatus;
        schedulerModeStatus @7 :SchedulerModeStatus;
        scheduleRegisterEntryGet @8 :ScheduleRegisterEntryDelete;
        scheduleRegisterEntrySet @9 :ScheduleRegisterEntrySet;
        scheduleRegisterEntryDelete @10 :ScheduleRegisterEntryDelete;
        scheduleRegisterEntryDeleteAll @11 :ScheduleRegisterEntryDeleteAll;
        scheduleRegisterEntryStatus :union {
            optional @12 :ScheduleRegisterEntryStatusOptional;
            minimal @13 :ScheduleRegisterEntryStatusMinimal;
        }
        scheduleRegisterListGet @14 :ScheduleRegisterListGet;
        scheduleRegisterListStatus @15 :ScheduleRegisterListStatus;
    }
}

struct RulesListGet {
}

struct RulesListStatus {
    ruleIds @0 :List(UInt8);
}

struct RegisterMaxSizeGet {
}

struct RegisterMaxSizeStatus {
    registerMaxSize @0 :UInt32;
}

struct SchedulerModeGet {
}

struct SchedulerModeStatus {
    schedulerMode @0 :UInt8;
}

struct ScheduleRegisterEntryDelete {
    entryId @0 :UInt8;
}

struct ScheduleRegisterEntrySet {
    entryId @0 :UInt8;
    schedulerRegisterEntry @1 :SchedulerRegisterEntry;
}

struct SchedulerRegisterEntry {
    arrayOfSlots @0 :List(Slots);
    rules @1 :List(Rules);
}

struct Slots {
    slotId @0 :UInt16;
    element @1 :UInt8;
    slotParameter @2 :Data;
}

struct Rules {
    ruleId @0 :UInt8;
    rule :union {
        freq @1 :UInt8;
        until @2 :DateTime;
        count @3 :UInt16;
        interval @4 :UInt16;
        bysecond @5 :List(UInt8);
        byminute @6 :List(UInt8);
        byhour @7 :List(UInt8);
        byday @8 :List(Int8);
        bymonthday @9 :List(Int8);
        byyearday @10 :List(Int16);
        byweekno @11 :List(Int8);
        bymonth @12 :UInt16;
        bysetpos @13 :List(Int16);
        dtstart @14 :DateTime;
        explicitRdate @15 :List(DateTime);
        exclusionsRdate @16 :List(DateTime);
    }
}

struct DateTime {
    second @0 :UInt8;
    minute @1 :UInt8;
    hour @2 :UInt8;
    day @3 :UInt8;
    month @4 :UInt8;
    year @5 :UInt16;
}

struct ScheduleRegisterEntryDeleteAll {
}

struct ScheduleRegisterEntryStatusOptional {
    entryId @0 :UInt8;
    status @1 :UInt8;
    schedulerRegisterEntry @2 :SchedulerRegisterEntry;
}

struct ScheduleRegisterEntryStatusMinimal {
    entryId @0 :UInt8;
    status @1 :UInt8;
}

struct ScheduleRegisterListGet {
}

struct ScheduleRegisterListStatus {
    entryIds @0 :List(UInt8);
}

